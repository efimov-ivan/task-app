{"version":3,"sources":["store/index.ts","UI/ActionButton.tsx","Components/Task/TaskCardHeader.tsx","Components/Comment/CommentForm.tsx","Components/Comment/Comment.tsx","UI/MyEditor.tsx","Components/Task/TaskCard.tsx","store/initialStates.ts","Components/Task/TaskForm.tsx","UI/MyDialog.tsx","Components/Task/Tasks.tsx","App.tsx","serviceWorker.js","index.js"],"names":["store","tasks","axios","get","then","response","key","data","push","reverse","loading","task","post","this","getTasks","put","id","delete","deleteComments","ID","showLoading","loadingComments","comments","taskId","comment","getComments","observable","ActionButton","icon","fn","text","color","className","style","size","variant","disabled","disableButtons","clearDisableButton","useState","buttonText","setButtonText","isActive","setIsActive","useEffect","interval","i","setInterval","clearInterval","Button","startIcon","onClick","observer","closeDialog","move","update","disableButton","setDisableButton","updateTask","values","CardHeader","title","action","Select","value","col","onChange","event","target","name","map","MenuItem","Save","bind","Delete","deleteTask","taskKey","commentValue","setCommentValue","TextField","fullWidth","multiline","rows","AddComment","postComment","showCommentForm","setShowCommentForm","Object","keys","AccountCircle","commentKey","fontSize","MyEditor","setFormValues","formValues","defaultContent","content","EditorState","createEmpty","createWithContent","convertFromRaw","JSON","parse","editorState","setEditorState","contentState","getCurrentContent","stringify","convertToRaw","wrapperClassName","editorClassName","toolbarClassName","toolbar","options","inline","superscript","subscript","list","indent","outdent","textAlign","onEditorStateChange","handleClose","DialogTitle","CircularProgress","DialogContent","dividers","CardContent","taskInit","order","noValidate","autoComplete","addTask","label","MyDialog","open","children","Dialog","onClose","scroll","maxWidth","Tasks","openModal","setOpenModal","setAction","currentTask","setCurrentTask","e","closeModal","returnHeadings","showTask","length","slice","filter","Boolean","window","location","hostname","match","ApolloClient","uri","cache","InMemoryCache","query","gql","result","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.469a86e0.chunk.js","sourcesContent":["import {observable} from \"mobx\"\nimport axios from \"axios\"\nimport {TaskType} from \"./types\"\n\nclass Store{\n\n  @observable tasks: TaskType[] = []\n  @observable loading: boolean = true\n  @observable comments: any\n  @observable loadingComments: boolean = true\n\n  // TASKS\n  getTasks() {\n    const tasks: TaskType[] = []\n    axios.get(\"https://my-tasks-797df.firebaseio.com/tasks.json\")\n      .then(response => {\n        for(let key in response.data){\n          tasks.push({...response.data[key], key: key})\n        }\n        this.tasks = tasks.reverse()\n        this.loading = false\n    })\n  }\n\n  async addTask(task: TaskType) {\n    await axios.post(\"https://my-tasks-797df.firebaseio.com/tasks.json\", {...task});\n    this.getTasks()\n  }\n\n  async updateTask(task: any){\n    await axios.put(`https://my-tasks-797df.firebaseio.com/tasks/${task.key}.json`, {...task});\n    this.getTasks()\n  }\n\n  async deleteTask(id: string){\n    await axios.delete(`https://my-tasks-797df.firebaseio.com/tasks/${id}.json`);\n    this.deleteComments(id)\n    this.getTasks()\n  }\n\n  // COMMENTS\n  async getComments(ID: string, showLoading: boolean = true) {\n    this.loadingComments = showLoading\n    await axios.get(`https://my-tasks-797df.firebaseio.com/comments/${ID}.json`)\n      .then(response => {\n        this.comments = response.data\n        this.loadingComments = false\n    })\n  }\n\n  async postComment(taskId: string, comment: {}){\n    await axios.post(`https://my-tasks-797df.firebaseio.com/comments/${taskId}.json`, {comment});\n    this.getComments(taskId, false)\n  }\n\n  async deleteComments(taskId: string, id: string = ''){\n    await axios.delete(`https://my-tasks-797df.firebaseio.com/comments/${taskId}/${id}.json`);\n    this.getComments(taskId, false)\n  }\n\n}\n\n// Store = decorate(Store, {\n//   tasks: observable,\n//   loading: observable,\n//   comments: observable,\n//   loadingComments: observable,\n//   addTask: action,\n//   getTasks: action,\n//   getComments: action\n// });\n\nexport const store  = new Store()\n","import React, {useState, useEffect } from \"react\"\nimport Button from \"@material-ui/core/Button\"\n\ntype ActionButton = {\n  icon?: React.ReactNode,\n  fn: () => void,\n  text: string,\n  color?: \"inherit\" | \"primary\" | \"secondary\" | \"default\" | undefined,\n  className?: string,\n  style?: React.CSSProperties | undefined,\n  size?: \"small\" | \"medium\" | \"large\" | undefined,\n  variant?: \"text\" | \"outlined\" | \"contained\" | undefined,\n  disabled?: boolean,\n  disableButtons?: () => void,\n  clearDisableButton?: () => void\n}\n\nconst ActionButton: React.FC<ActionButton> = ({icon, fn, text, color, className, style, size = 'small', variant, disabled, disableButtons, clearDisableButton}) => {\n\n  const [buttonText, setButtonText] = useState(text);\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    let interval: any = null;\n    let i = 0\n    if (isActive) {\n      if(disableButtons) {\n        disableButtons()\n      }\n      interval = setInterval(() => {\n        i++\n        setButtonText(`cancel ${4 - i}`)\n        if(i >= 4) {\n          i = 0\n          fn()\n          setIsActive(false);\n        }\n      }, 1000);\n    } else if (!isActive) {\n      clearInterval(interval);\n      setButtonText(text);\n      if(clearDisableButton) {\n        clearDisableButton()\n      }\n    }\n    return () => {clearInterval(interval)};\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isActive]);\n\n  return (\n    <Button \n      startIcon={icon}\n      size={size ? size : \"small\"}\n      color={color ? color: 'primary'}\n      variant={variant ? variant : 'outlined'}\n      disabled={disabled}\n      style={style ? style : {}}\n      className={className ? className : ''}\n      onClick={() => {setIsActive(!isActive);}}\n      >\n      {buttonText}\n    </Button>\n  )\n}\n\nexport default ActionButton","import React, {useState} from 'react'\nimport {store} from \"../../store/index\"\nimport {observer} from \"mobx-react\"\nimport ActionButton from '../../UI/ActionButton'\nimport {Select, CardHeader, MenuItem } from '@material-ui/core'\nimport {Delete, Save} from '@material-ui/icons'\nimport {TaskType} from \"../../store/types\"\n\ntype TaskCardHeaderType = {\n  task: TaskType,\n  closeDialog: any\n}\n\nconst TaskCardHeader: React.FC<TaskCardHeaderType> = ({task, closeDialog}) => {\n\n  const [disableButton, setDisableButton] = useState({move:false,update:false,delete:false})\n\n  const selectHandler = (event: React.ChangeEvent<{name?: string | undefined; value: unknown;}>) =>  {\n    updateTask({col: event.target.value})\n    closeDialog()\n  }\n\n  const deleteTask = () => {\n    store.deleteTask(task.key);\n    closeDialog();\n  };\n\n  const updateTask = (values: {}) => {\n    store.updateTask({...task, ...values});\n    setDisableButton({move:false,update:false,delete:false})\n  };\n\n  const SelectMoveItems = (): any => {\n    const items: {value: number, name: string}[] = [\n      {\n        value: 3,\n        name: 'Moveto'\n      },\n      {\n        value: 1,\n        name: 'Tasks'\n      },\n      {\n        value: 2,\n        name: 'Question'\n      },\n      {\n        value: 0,\n        name: 'Completed'\n      }\n    ]\n    return items.map(({value, name}) => {\n      return <MenuItem \n              value={value}\n              key={value}\n              disabled={value === 3 || value === task.col}\n            >\n              {name}\n            </MenuItem>\n    })\n  }\n\n  return (\n    <CardHeader\n    className=\"card-top\"\n    title=\"Wednesday, July 1, 2020\"\n    action={\n      <div>\n        <Select value={task.col} variant=\"outlined\" onChange={selectHandler} className=\"action-button\" disabled={disableButton.move}>\n          {SelectMoveItems()}\n        </Select>\n        <ActionButton \n          icon={<Save />} \n          fn={updateTask.bind(true, task)}\n          text=\"update\"\n          className=\"action-button\"\n          disabled={disableButton.update}\n          clearDisableButton={() => setDisableButton({update: false, move:false, delete:false})}\n          disableButtons={() => setDisableButton({...disableButton, move:true, delete:true})}\n        />\n        <ActionButton \n          icon={<Delete />} \n          fn={deleteTask} \n          text=\"delete\"\n          className=\"action-button\"\n          disabled={disableButton.delete}\n          clearDisableButton={() => setDisableButton({update: false, move:false, delete:false})}\n          disableButtons={() => setDisableButton({...disableButton, move:true, update:true})}\n        />\n      </div>\n    }\n/>\n  )\n}\n\nexport default observer(TaskCardHeader)","import React, { useState } from 'react'\nimport { store } from \"../../store/index\"\nimport { observer } from \"mobx-react\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport { AddComment } from '@material-ui/icons'\n\ntype PropsType = {\n    taskKey: string\n}\n\nconst CommentForm: React.FC<PropsType> = ({ taskKey }) => {\n\n    const [commentValue, setCommentValue] = useState<string>('')\n\n    const postComment = () => {\n        if (commentValue) {\n            store.postComment(taskKey, commentValue);\n            setCommentValue('')\n        }\n    }\n\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCommentValue(event.target.value)\n    }\n    \n    return (\n        <div className=\"comment-form\">\n            <TextField\n                fullWidth\n                name=\"comment\"\n                variant=\"outlined\"\n                multiline\n                rows=\"4\"\n                onChange={changeHandler}\n                value={commentValue}\n            />\n            <div className=\"text-center\">\n                <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    startIcon={<AddComment />}\n                    color=\"primary\"\n                    onClick={() => postComment()}\n                >\n                    post\n              </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default observer(CommentForm)","import React, { Fragment, useState } from 'react'\nimport {store} from \"../../store/index\"\nimport {observer} from \"mobx-react\"\nimport Button from \"@material-ui/core/Button\"\nimport {AddComment, AccountCircle} from '@material-ui/icons'\nimport ActionButton from '../../UI/ActionButton'\n// import TextField from \"@material-ui/core/TextField\"\nimport CommentForm from './CommentForm'\n\ntype PropsType = {\n  taskKey: string\n}\n\nconst Comment: React.FC<PropsType> = ({taskKey}) => {\n\n  const { comments } = store\n\n  const [showCommentForm, setShowCommentForm] = useState<boolean>(false)\n\n  const deleteComment = (commentKey: string) => {\n    store.deleteComments(taskKey, commentKey)\n  }\n\n  return (\n    <Fragment>\n      <div className=\"comments-list\">\n        { comments \n          ? Object.keys(comments).map((key) => (\n              <div className=\"comment\" key={key}>\n                <div className=\"comment-content\">\n                  <AccountCircle className=\"icon\"/>\n                  {comments[key].comment}\n                </div>\n                <ActionButton\n                  fn={() => deleteComment(key)}\n                  text=\"delete\"\n                  color=\"primary\"\n                  className=\"delete\"\n                  size=\"small\"\n                  variant=\"text\"\n                  style={{fontSize:\"10px\"}}\n                />\n              </div>\n            ))\n          : null\n        }\n      </div>\n      { showCommentForm\n        ? <CommentForm taskKey={taskKey}></CommentForm>\n        : <div className=\"text-center\">\n            <Button \n              size=\"small\" \n              color=\"primary\"\n              variant=\"contained\"\n              startIcon={<AddComment/>}\n              onClick={() => setShowCommentForm(true)}\n            >\n              post comment\n            </Button>\n          </div>\n      }\n    </Fragment>\n  )\n}\n\nexport default observer(Comment)","import React, {useState, useEffect} from 'react'\nimport { EditorState, convertToRaw, convertFromRaw } from 'draft-js'\nimport { Editor } from 'react-draft-wysiwyg'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\ntype PropsType = {\n  setFormValues: any,\n  formValues: {\n    content: string\n  }\n}\n\nconst MyEditor: React.FC<PropsType> = ({setFormValues, formValues}) => {\n  \n  let defaultContent: any = ''\n  if(formValues.content === ''){\n    defaultContent = EditorState.createEmpty()\n  } else {\n    defaultContent = EditorState.createWithContent(convertFromRaw(JSON.parse(formValues.content)))\n  }\n  \n  const [editorState, setEditorState] = useState(defaultContent)\n\n  useEffect(() => {\n    const contentState = editorState.getCurrentContent();\n    setFormValues({...formValues, content: JSON.stringify(convertToRaw(contentState))})\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editorState])\n\n  return <Editor\n          editorState={editorState}\n          wrapperClassName=\"wrapper-class\"\n          editorClassName=\"editor-class\"\n          toolbarClassName=\"toolbar-class\"\n          toolbar={{\n            options: ['inline', 'list', 'textAlign'],\n            inline: {\n              superscript: {className: 'hidden'},\n              subscript: {className: 'hidden'}\n            },\n            list: {\n              indent: {className: 'hidden'},\n              outdent: {className: 'hidden'}\n            },\n            textAlign: {\n              options: ['left', 'center', 'right'],\n            }\n          }}\n          onEditorStateChange={setEditorState}\n        />\n}\n\nexport default MyEditor","import React, {useState, useEffect, Fragment } from \"react\"\nimport {store} from \"../../store/index\"\nimport {observer} from \"mobx-react\"\nimport TaskCardHeader from './TaskCardHeader'\nimport Comment from '../Comment/Comment'\nimport MyEditor from '../../UI/MyEditor'\nimport {CardContent, DialogTitle, DialogContent, TextField, CircularProgress} from '@material-ui/core'\nimport {TaskType} from \"../../store/types\"\n\ntype TaskCardType = {\n  handleClose: () => void,\n  task: TaskType\n}\n\nconst TaskCard: React.FC<TaskCardType> = ({handleClose, task}) => {\n\n  const { loadingComments } = store;\n\n  const [formValues, setFormValues] = useState<TaskType>({...task});\n\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormValues({ ...formValues, title: event.target.value })\n  }\n\n  useEffect(() => {\n    store.getComments(task.key);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <DialogTitle>\n        <TaskCardHeader \n          closeDialog={handleClose}\n          task={formValues}\n        />\n      </DialogTitle>\n      { loadingComments \n        ? <div className=\"loading\"><CircularProgress/></div>\n        : <DialogContent dividers={true}>\n            <CardContent className=\"task-content\">\n              <TextField\n                name=\"title\"\n                className=\"title\"\n                value={formValues.title}\n                variant=\"outlined\"\n                fullWidth\n                onChange={changeHandler}\n              />\n              <MyEditor setFormValues={setFormValues} formValues={formValues}/>\n              <Comment taskKey={task.key}/>\n            </CardContent>\n          </DialogContent>\n      }\n    </Fragment>\n  )\n}\n\nexport default observer(TaskCard)","export const taskInit = {\n    title: '',\n    content: '',\n    order: 0,\n    col: 0,\n    key: ''\n}","import React, { useState } from \"react\"\nimport { observer } from \"mobx-react\"\nimport {Save} from '@material-ui/icons'\nimport {DialogTitle, CardHeader, DialogContent, TextField} from \"@material-ui/core\";\nimport ActionButton from '../../UI/ActionButton'\nimport MyEditor from '../../UI/MyEditor'\nimport { store } from \"../../store/index\"\nimport {TaskType} from \"../../store/types\"\nimport {taskInit} from \"../../store/initialStates\"\n\ntype TaskFormProps = {\n  col: number,\n  handleClose: () => void\n}\n\nconst TaskForm: React.FC<TaskFormProps> = ({handleClose, col}) => {\n  const [formValues, setFormValues] = useState<TaskType>({...taskInit, col})\n\n  const handleSaveTask = () => {\n    if(formValues.title) {\n      store.addTask(formValues);\n      setFormValues(taskInit);\n      handleClose();\n    }\n  }\n\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormValues({ ...formValues, title: event.target.value })\n  }\n\n  return (\n    <form noValidate autoComplete=\"off\">\n      <DialogTitle>\n        <CardHeader\n            className=\"card-top\"\n            title=\"Wednesday, July 1, 2020\"\n            action={\n              <ActionButton \n                icon={<Save />} \n                fn={handleSaveTask}\n                text=\"add\" \n                variant=\"outlined\" \n                size=\"small\"\n              />\n            }\n        />\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          id=\"outlined-basic\"\n          label=\"Title\"\n          name=\"title\"\n          variant=\"outlined\"\n          onChange={changeHandler}\n          value={formValues.title}\n        />\n        <MyEditor setFormValues={setFormValues} formValues={formValues}/>\n      </DialogContent>\n    </form>\n  )\n}\n\nexport default observer(TaskForm);\n","import React from \"react\"\nimport Dialog from '@material-ui/core/Dialog'\n\ntype MyDialogProps = {\n  open: boolean,\n  handleClose: () => void,\n  children: React.ReactNode\n}\n\nconst MyDialog: React.FC<MyDialogProps> = ({open, handleClose, children}) => {\n  return (\n    <Dialog\n      className=\"modal\"\n      open={open}\n      onClose={handleClose}\n      scroll=\"paper\"\n      fullWidth\n      maxWidth=\"md\"\n    >\n      {children}\n    </Dialog>\n  );\n}\n\nexport default MyDialog\n","import React, { useState, Fragment } from \"react\"\nimport TaskCard from \"./TaskCard\"\nimport TaskForm from \"./TaskForm\"\nimport MyDialog from \"../../UI/MyDialog\"\nimport Add from \"@material-ui/icons/Add\"\nimport {TaskType} from \"../../store/types\"\nimport {taskInit} from \"../../store/initialStates\"\n\ntype TasksProps = {\n  tasks: TaskType[],\n  col: number\n}\n\nconst Tasks: React.FC<TasksProps> = ({tasks, col}) => {\n\n  const [openModal, setOpenModal] = useState<boolean>(false);\n  const [action, setAction] = useState<string>('');\n  const [currentTask, setCurrentTask] = useState<TaskType>(taskInit);\n\n  const showTask = (task: TaskType) => {\n    setCurrentTask(task)\n    setAction('showTask')\n    setOpenModal(true);\n  }\n\n  const addTask = (e: string) => {\n    setAction(e);\n    setOpenModal(true);\n  };\n\n  const closeModal = () => {\n    setOpenModal(false);\n  };\n\n  const returnHeadings = (col: number) => {\n    switch(col){\n      case 0:\n        return <h3>Completed</h3>\n      case 1:\n        return (\n          <Fragment>\n            <h3>Tasks</h3>\n            <Add\n              className=\"add\"\n              fontSize=\"small\"\n              onClick={() => addTask(\"AddTask\")}\n            />\n          </Fragment>\n          )\n      case 2:\n        return (\n          <Fragment>\n            <h3>Question</h3>\n            <Add\n              className=\"add\"\n              fontSize=\"small\"\n              onClick={() => addTask(\"AddQuestion\")}\n            />\n          </Fragment>\n          )\n      default: return null\n    }\n  }\n\n  return (\n    <div className=\"tasks-box\">\n      <div className=\"tasks-heading\">\n        {returnHeadings(col)}\n      </div>\n\n      <div className=\"tasks-list content\">\n        {tasks.map((task, key) =>\n          <div key={key} onClick={() => showTask(task)}>\n            {task.title.length > 60 ? task.title.slice(0,60) + '...' : task.title }\n          </div>\n        )}\n      </div>\n\n      <MyDialog open={openModal} handleClose={closeModal}>\n        {action === \"AddTask\" ? (\n          <TaskForm handleClose={closeModal} col={1}></TaskForm>\n        ) : action === \"AddQuestion\" ? (\n          <TaskForm handleClose={closeModal} col={2}></TaskForm>\n        ) : (\n          <TaskCard handleClose={closeModal} task={currentTask}></TaskCard>\n        )}\n      </MyDialog>\n\n    </div>\n  )\n}\n\nexport default Tasks\n","import React, { useEffect } from \"react\"\nimport {store} from \"./store/index\"\nimport {observer} from \"mobx-react\"\nimport Tasks from \"./Components/Task/Tasks\"\nimport {CircularProgress} from '@material-ui/core'\n\nconst App: React.FC = () => {\n  const { tasks, loading } = store\n  const colsCount: number[] = [0, 1, 2]\n\n  useEffect(() => {\n    store.getTasks()\n  }, [])\n\n  return (\n    <div className=\"App container\">\n      { loading\n        ? <div className=\"loading\"><CircularProgress/></div> \n        : colsCount.map( i =>\n            <div className=\"column\" key={i}>\n              <Tasks tasks={tasks.filter(task => task.col === i)} col={i} />\n            </div>\n          )\n      }\n    </div>\n  )\n}\n\nexport default observer(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloClient, InMemoryCache, gql} from '@apollo/client'\nimport './App.sass'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\n\nclient\n  .query({\n    query: gql`\n      query GetRates {\n        rates(currency: \"USD\") {\n          currency\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}